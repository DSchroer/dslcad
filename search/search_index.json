{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>DSLCAD is a parametric CAD package. It offers a programming language &amp; interpreter for building 3D models. It is designed  for the 3D printing space but is flexible for use in other areas.</p> <p>DSLCAD is free, open source and cross-platform!</p> <p>Inspired by OpenSCAD, it has a language and 3D viewer to simplify the modeling experience.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>100% scriptable parametric modeling</li> <li>Fully cross-platform</li> <li>Built in preview tool</li> <li>Web compatible</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Download the latest DSLCAD from the Releases page or use the Online Editor to try it out.</p> <p>DSLCAD is available for:</p> <ul> <li>Windows</li> <li>MacOS</li> <li>Linux</li> </ul> <p>Download the zip file for your system and extract it.</p>"},{"location":"#hello-world","title":"Hello World","text":"<p>To create a DSLCAD program, create a new <code>hello.ds</code> file. Edit the file and add the following code:</p> <pre><code>// create a simple cube\ncube();\n</code></pre> <p>Now render it in DSLCAD:</p> <pre><code>dslcad ./hello.ds --preview\n</code></pre> <p>You should see the preview open with a cube:</p> <p></p> <p>To learn more, check out the concepts page.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>DSLCAD has some main concepts to understand when modeling. This page does over them at a high level and explains their intended use. For a more detailed list of operations check out the Syntax Reference page.</p>"},{"location":"concepts/#shapes","title":"Shapes","text":"<p>When building anything in DSLCAD you need to start somewhere. Normally this is done by starting with a 2D or 3D shape. </p>"},{"location":"concepts/#2d-shapes","title":"2D Shapes","text":"<p>The basic 2D shapes are made using the <code>square</code> and <code>circle</code> functions.</p> <pre><code>square(x=5, y=7);\n</code></pre> <pre><code>circle(radius=7);\n</code></pre>"},{"location":"concepts/#3d-shapes","title":"3D Shapes","text":"<p>The basic 3D shapes are made using the <code>cube</code>, <code>sphere</code> and <code>cylinder</code> functions.</p> <pre><code>cube(x=1, y=3, z=5);\n</code></pre> <pre><code>sphere(radius=4);\n</code></pre> <pre><code>cylinder(radius=2, height=4);\n</code></pre>"},{"location":"concepts/#operations","title":"Operations","text":""},{"location":"concepts/#moving-objects","title":"Moving Objects","text":"<p>Often you need to position objects in 3D space.  The <code>translate</code> function lets you move an object. The <code>rotate</code> function lets you rotate an object around the x, y or z axis. The <code>scale</code> function lets scale an object up or down.</p> <pre><code>// cube moved up the z axix by 2 units\ncube() -&gt; translate(z=2);\n\n// cube rotated 225 degrees\ncube() -&gt; rotate(z=180 + 45);\n\n// cube doubled in size\ncube() -&gt; scale(scale=2);\n</code></pre> <p>The <code>center</code> function lets you center any object on any axis you want.</p> <pre><code>// cube centered on the x and y axis but not the z axis\ncube() -&gt; center(z=false);\n</code></pre>"},{"location":"concepts/#boolean-operations-csg","title":"Boolean Operations (CSG)","text":"<p>To manipulate 3D objects DSLCAD uses boolean operations (AKA Constructive Solid Geometry).</p> <p>You can combine two objects using the <code>union</code> function. This joins both object into a single object.</p> <pre><code>// cube combined with a sphere\ncube() -&gt; union(sphere(radius=1));\n</code></pre> <p>You can cut away at an object using the <code>difference</code> function. This removes the second object from the first object.</p> <pre><code>// cube with a sphere cut out\ncube() -&gt; difference(sphere(radius=1));\n</code></pre> <p>You can get the overlap using the <code>intersect</code> function. This leaves the overlapping parts of both objects.</p> <pre><code>// overlap of a cube and sphere\ncube() -&gt; intersect(sphere(radius=1));\n</code></pre>"},{"location":"concepts/#2d-to-3d","title":"2D to 3D","text":"<p>2D objects can be converted to 3D objects using the <code>extrude</code> or <code>revolve</code> functions.</p> <pre><code>// extrude a square into a rectangular cube\nsquare() -&gt; extrude(z=2);\n</code></pre> <pre><code>// revolve a square around the y axis to make a half moon\nsquare() -&gt; revolve(y=180);\n</code></pre>"},{"location":"concepts/#3d-to-2d","title":"3D to 2D","text":"<p>Sometimes you need a 2D outline of a 3D part, use the <code>slice</code> function to cut a cross-section.</p> <pre><code>// cut the outline of a complex shape\ncube() \n-&gt; union(sphere() -&gt; translate(y=0.9)) \n-&gt; center(x=false, y=false)\n-&gt; slice(square(x=10, y=10));\n</code></pre>"},{"location":"concepts/#control-flow","title":"Control Flow","text":"<p>Control flow operations include <code>if</code>, <code>map</code> and <code>reduce</code>. These operations are expressions and can be nested anywhere  within your parts.</p> <p>The <code>if</code> operator can be used to branch conditionally.</p> <pre><code>if (1 == 1):\n    cube()\nelse:\n    sphere()\n;\n</code></pre> <p>The <code>range</code> function can be used with <code>map</code> and <code>reduce</code> to  create simple loops.</p> <pre><code>// make 10 cubes and space them out\nmap range(0, 10) as x:\n    cube() -&gt; translate(x=2 * x);\n</code></pre> <p>The <code>reduce</code> operator is similar but allows you to aggregate results as needed. The <code>from</code> part is optional but is helpful when your output is different from your input.</p> <pre><code>// combine 10 spaced out cubes into one part\nreduce range(1, 10) from cube() as acc, x:\n    acc -&gt; union(\n        cube() -&gt; translate(x, y=0.5 * x)\n    );\n</code></pre> <p>For more advanced control flow you can also use recursion in part files or functions.</p>"},{"location":"concepts/#scopes-and-functions","title":"Scopes and Functions","text":"<p>For private variables, you can make use of scopes:</p> <pre><code>// create a part using nested variables\nvar object = {\n    var base = 10;\n    var height = 10;\n    cube(x=base, y=base, z=height);\n};\n\nobject;\n</code></pre> <p>The <code>func</code> keyword can be used to turn a scope into a function with arguments.</p> <pre><code>// use a func as a constructor for custom parts\nvar object = func {\n    var base = 10;\n    var height = 10;\n    cube(x=base, y=base, z=height);\n};\n\nobject(base=20);\n</code></pre>"},{"location":"concepts/#printing-text","title":"Printing Text","text":"<p>There are a few text tools that can be used to print helpful notes  about your parts. Text can be treated the same as any part and DSLCAD will happily print it out.</p> <p>The <code>formatln</code> function is used to generate text.</p> <pre><code>var box = cube(x=10);\n\nformat(\"volume (mm^3): {volume}\", volume=round(box.volume));\n\nbox;\n</code></pre>"},{"location":"concepts/#parts","title":"Parts","text":"<p>Simple projects can get away with single 3D models. For more complex projects it is often useful to break things into multiple parts.</p> <p>You can make multiple parts in the same script. Just separate each part into its own statement like so:</p> <pre><code>// two separate parts that can be printed separately\n./part1();\n./part2();\n</code></pre> <p>If you wanted them to be a single part you can join them with a <code>union</code> to form  a single object.</p> <pre><code>// two separate parts that are joined into one\n./part1() -&gt;left union(right=./part2());\n</code></pre>"},{"location":"concepts/#workflow","title":"Workflow","text":"<p>DSLCAD is designed with an opinionated workflow in mind. Following this will  help you build high quality parts quickly. </p> <p>For every part that you want to build:</p> <ol> <li> <p>Start with 2D sections of it. Currently, the <code>face</code> function is the simplest way to create any 2D sketch. </p> </li> <li> <p>Extrude your face into a 3D section using <code>extrude</code> or <code>revolve</code> to bring your face into the 3D world. </p> </li> <li> <p>Combine 3D sections using <code>union</code>, <code>difference</code> and <code>intersect</code> to cut out the  final dimensions of your part. </p> </li> <li> <p>[OPTIONAL] Use <code>chamfer</code> or <code>fillet</code> to add a polished look to the part. </p> </li> </ol>"},{"location":"editor/","title":"Web Editor","text":"cube(); Download Render"},{"location":"reference/","title":"Syntax Reference","text":"<p>The following is a cheat sheet style reference for all operators in DSLCAD. Please refer to the examples folder for even more reference on how to build parts.</p>"},{"location":"reference/#cheat-sheet","title":"Cheat Sheet","text":""},{"location":"reference/#syntax","title":"Syntax","text":"<ul> <li><code>var name = value;</code> create a variable called name that stores value</li> <li><code>value;</code> draw the value, each script can only draw one thing</li> <li><code>b(name=a)</code> pass a into the name parameter of function b</li> <li><code>a -&gt;name b()</code> pipe a into the name parameter of function b</li> <li><code>./file(name=a)</code> run a file as if it were a function</li> <li><code>model.data</code> access data of a model</li> <li><code>list[5]</code> get the fifth item of a list</li> <li><code>if a: something() else: something_else();</code> test a and follow one branch depending on the value</li> </ul>"},{"location":"reference/#lists","title":"Lists","text":"<ul> <li><code>[1,2,3]</code> make a list with three numbers</li> <li><code>map MY_LIST as NAME: OPERATION</code> loop over every entry in MY_LIST</li> <li><code>reduce MY_LIST as NAME1,NAME2: OPERATION</code> combine every item in MY_LIST</li> <li><code>reduce MY_LIST from BASE as NAME1,NAME2: OPERATION</code> combine every item in MY_LIST starting from BASE</li> </ul>"},{"location":"reference/#operators","title":"Operators","text":"<ul> <li><code>a + b</code> addition</li> <li><code>a - b</code> subtraction</li> <li><code>a * b</code> multiplication</li> <li><code>a / b</code> division</li> <li><code>a % b</code> modulo</li> <li><code>a ^ b</code> power</li> </ul>"},{"location":"reference/#logic","title":"Logic","text":"<ul> <li><code>a &lt; b</code> less than</li> <li><code>a &lt;= b</code> less than or equal</li> <li><code>a == b</code> equal</li> <li><code>a != b</code> not equal</li> <li><code>a &gt; b</code> greater than</li> <li><code>a &gt;= b</code> greater than or equal</li> <li><code>a and b</code> logical and</li> <li><code>a or b</code> logical or</li> <li><code>not a</code> logical not</li> </ul>"},{"location":"reference/#properties","title":"Properties","text":"<ul> <li><code>point.{x,y,z}</code> properties of points</li> <li><code>2d_value.{center}</code> properties of 2D objects</li> <li><code>3d_value.{center}</code> properties of 3D objects</li> </ul>"},{"location":"reference/#math","title":"Math","text":"<ul> <li><code>pi()</code> constant pi</li> <li><code>rad_to_deg(radians=number)</code> convert radians to degrees</li> <li><code>deg_to_rad(degrees=number)</code> convert degrees to radians</li> <li><code>sin(degrees=number)</code> sin operation</li> <li><code>sin(radians=number)</code> sin operation</li> <li><code>cos(degrees=number)</code> cos operation</li> <li><code>cos(radians=number)</code> cos operation</li> <li><code>tan(degrees=number)</code> tan operation</li> <li><code>tan(radians=number)</code> tan operation</li> <li><code>round(number=number)</code> round to the nearest whole number</li> <li><code>ceil(number=number)</code> round up to a whole number</li> <li><code>floor(number=number)</code> round down to a whole number</li> <li><code>sqrt(number=number)</code> square root of a number</li> </ul>"},{"location":"reference/#2d","title":"2D","text":"<ul> <li><code>point(x=[number], y=[number], z=[number])</code> create a new 2D point</li> <li><code>line(start=point, end=point)</code> create a line between two points</li> <li><code>square(x=[number], y=[number])</code> create a square</li> <li><code>circle(radius=[number])</code> create a circle</li> <li><code>arc(start=point, center=point, end=point)</code> create an arcing line between three points</li> <li><code>union(left=edge, right=edge)</code> combine two edges</li> <li><code>face(parts=list)</code> make a closed face from a list of points, lines and arcs</li> <li><code>translate(shape=edge, x=[number], y=[number], z=[number])</code> move an edge</li> <li><code>rotate(shape=edge, angle=[number])</code> rotate an edge</li> <li><code>rotate(shape=edge, x=[number], y=[number], z=[number])</code> rotate an edge</li> <li><code>scale(shape=edge, scale=number)</code> scale an edge</li> <li><code>center(shape=edge, x=[bool], y=[bool], z=[bool])</code> center an edge</li> <li><code>offset(shape=edge, distance=number)</code> offset an edge</li> </ul>"},{"location":"reference/#3d","title":"3D","text":"<ul> <li><code>extrude(shape=edge, x=[number], y=[number], z=[number])</code> extrude a face into a 3D shape</li> <li><code>revolve(shape=edge, x=[number], y=[number], z=[number])</code> extrude a face into a 3D shape around an axis</li> <li><code>cube(x=[number], y=[number], z=[number])</code> create a cube</li> <li><code>sphere(radius=[number])</code> create a sphere</li> <li><code>cylinder(radius=[number], height=[number])</code> create a cylinder</li> <li><code>union(left=shape, right=shape)</code> combine two shapes</li> <li><code>chamfer(shape=shape, radius=number)</code> chamfer edges</li> <li><code>fillet(shape=shape, radius=number)</code> fillet edges</li> <li><code>difference(left=shape, right=shape)</code> cut one shape out of another</li> <li><code>intersect(left=shape, right=shape)</code> intersection between two shapes</li> <li><code>translate(shape=shape, x=[number], y=[number], z=[number])</code> move a shape</li> <li><code>rotate(shape=shape, x=[number], y=[number], z=[number])</code> rotate a shape</li> <li><code>scale(shape=shape, scale=number)</code> scale a shape</li> <li><code>scale(shape=shape, x=[number], y=[number], z=[number])</code> scale a shape</li> <li><code>center(shape=shape, x=[bool], y=[bool], z=[bool])</code> center a shape</li> <li><code>slice(left=shape, right=edge)</code> cut a slice out of a shape</li> <li><code>slice(left=shape, right=shape)</code> cut a slice out of a shape</li> </ul>"},{"location":"reference/#lists_1","title":"Lists","text":"<ul> <li><code>length(list=list)</code> get the length of a list</li> <li><code>range(start=[number], end=number)</code> create a list of numbers from a range</li> </ul>"},{"location":"reference/#text","title":"Text","text":"<ul> <li><code>string(item=*)</code> convert to text</li> <li><code>format(message=text, ...)</code> format text using {my_arg} style formatting</li> <li><code>formatln(message=text, ...)</code> format text with newline</li> </ul>"}]}